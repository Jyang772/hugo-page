<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Комбинаторная оптимизация on Алгоритмика</title>
    <link>https://ru.algorithmica.org/cs/combinatorial-optimization/</link>
    <description>Recent content in Комбинаторная оптимизация on Алгоритмика</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Tue, 14 Sep 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ru.algorithmica.org/cs/combinatorial-optimization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Жадные алгоритмы</title>
      <link>https://ru.algorithmica.org/cs/combinatorial-optimization/greedy/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://ru.algorithmica.org/cs/combinatorial-optimization/greedy/</guid>
      <description>Жадными называют класс алгоритмов, заключающихся в принятии локально оптимальных решений на каждом этапе. Так как локально оптимальное решение вычислить гораздо проще, чем глобально оптимальное, такие алгоритмы обычно имеют хорошую асимптотику.&#xA;В некоторых случаях жадные алгоритмы приводят к оптимальным конечным решениям, а в других — нет. Придумать и особенно доказать корректность жадных алгоритмов часто бывает очень сложно.&#xA;В этой статье мы разберем несколько классических примеров задач, решающихся жадным алгоритмом.&#xA;#МонеткиЗадача. Монетная система некоторого государства состоит из монет достоинством $a_1 = 1 &amp;lt; a_2 &amp;lt; a_3 &amp;lt; \ldots &amp;lt; a_n$, причём каждый следующий номинал делится на предыдущий.</description>
    </item>
    <item>
      <title>Матроиды</title>
      <link>https://ru.algorithmica.org/cs/combinatorial-optimization/matroid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ru.algorithmica.org/cs/combinatorial-optimization/matroid/</guid>
      <description>Понятие матроида нужно, чтобы придумывать и доказывать некоторые жадные алгоритмы в задачах, где нужно набрать какое-то множество объектов максимального веса. Например, минимальный остов, максимальное вершинно-взвешенное паросочетание или выполнение заказов с ограничениями по времени.&#xA;Если вы не специалист по абстрактной алгебре, рекомендуется подсматривать примеры матроидов в конце статьи.&#xA;#ОпределениеМатроидом называется пара $(X, I)$, где $X$ — множество элементов, называемое носителем матроида, а $I$ — некоторое множество подмножеств $X$, называемое семейством независимых множеств.</description>
    </item>
    <item>
      <title>Метод отжига</title>
      <link>https://ru.algorithmica.org/cs/combinatorial-optimization/annealing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ru.algorithmica.org/cs/combinatorial-optimization/annealing/</guid>
      <description>Алгоритм имитации отжига (англ. simulated annealing) — эвристический алгоритм глобальной оптимизации, особенно эффективный при решении дискретных и комбинаторных задач.&#xA;Алгоритм вдохновлён процессом отжига в металлургии — техники, заключающейся в нагревании и постепенном охлаждении металла для увеличения его кристаллизованности и уменьшения дефектов. Симулирование отжига в переборных задачах может быть использовано для приближённого нахождения глобального минимума функций с большим количеством свободных переменных.&#xA;Максимизация функции одной переменной методом отжига Алгоритм вероятностный и не даёт почти никаких гарантий сходимости, однако хорошо работает на практике при решении NP-полных задач.</description>
    </item>
  </channel>
</rss>
